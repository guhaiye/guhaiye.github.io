<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[每天一个linux命令之 pwd]]></title>
    <url>%2F2019%2F03%2F18%2Fpwd%2F</url>
    <content type="text"><![CDATA[一、Linux pwd命令语法 pwd [OPTION]… 参数说明: -L, –logical #use PWD from environment, even if it contains symlinks -P, –physical #avoid all symlinks –help #display this help and exit –version #output version information and exit -L 目录连接链接时，输出连接路径 -P 输出物理路径 二、Linux pwd命令实例 查看当前所在目录： 查看链接路径 写到环境变量中 export PS1=’[\u@$PWD]\$’ 这样在命令提示符前方会显示出当前的目录 [root@/root/linuxdaxue.com/testDir]# ok，有关Linux pwd命令的相关内容就先给大家介绍到这里。]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一个linux命令之 mv]]></title>
    <url>%2F2019%2F03%2F15%2Fmv%2F</url>
    <content type="text"><![CDATA[1.作用mv命令用来为文件或目录改名，或者将文件由一个目录移入另一个目录中，它的使用权限是所有用户。该命令如同DOS命令中的ren和move的组合。2.格式mv[options] 源文件或目录 目标文件或目录3.[options]主要参数－i：交互方式操作。如果mv操作将导致对已存在的目标文件的覆盖，此时系统询问是否重写，要求用户回答“y”或“n”，这样可以避免误覆盖文件。－f：禁止交互操作。mv操作要覆盖某个已有的目标文件时不给任何指示，指定此参数后i参数将不再起作用。4.应用实例（1）将/usr/cbu中的所有文件移到当前目录（用“.”表示）中：$ mv /usr/cbu/ * .（2）将文件cjh.txt重命名为wjz.txt：$ mv cjh.txt wjz.txt]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一个linux命令之 tar]]></title>
    <url>%2F2019%2F03%2F14%2Ftar%2F</url>
    <content type="text"><![CDATA[tar -c: 建立压缩档案-x：解压-t：查看内容-r：向压缩归档文件末尾追加文件-u：更新原压缩包中的文件 这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。 -z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出 下面的参数-f是必须的 -f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。 tar -cf all.tar *.jpg这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。 tar -rf all.tar *.gif这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。 tar -uf all.tar logo.gif这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。 tar -tf all.tar这条命令是列出all.tar包中所有文件，-t是列出文件的意思 tar -xf all.tar这条命令是解出all.tar包中所有文件，-x是解开的意思 压缩tar –cvf jpg.tar .jpg 将目录里所有jpg文件打包成tar.jpgtar –czf jpg.tar.gz .jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gztar –cjf jpg.tar.bz2 .jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2tar –cZf jpg.tar.Z .jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Zrar a jpg.rar .jpg rar格式的压缩，需要先下载rar for linuxzip jpg.zip .jpg zip格式的压缩，需要先下载zip for linux解压tar –xvf file.tar 解压 tar包tar -xzvf file.tar.gz 解压tar.gztar -xjvf file.tar.bz2 解压 tar.bz2tar –xZvf file.tar.Z 解压tar.Zunrar e file.rar 解压rarunzip file.zip 解压zip 总结.tar 用 tar –xvf 解压 .gz 用 gzip -d或者gunzip 解压.tar.gz和.tgz 用 tar –xzf 解压.bz2 用 bzip2 -d或者用bunzip2 解压 .tar.bz2用tar –xjf 解压.Z 用 uncompress 解压 .tar.Z 用tar –xZf 解压.rar 用 unrar e解压 .zip 用 unzip 解压 linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。 1．命令格式： tar[必要参数][选择参数][文件] 2．命令功能： 用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的 3．命令参数： 必要参数有如下： -A 新增压缩文件到已存在的压缩 -B 设置区块大小 -c 建立新的压缩文件 -d 记录文件的差别 -r 添加文件到已经压缩的文件 -u 添加改变了和现有的文件到已经存在的压缩文件 -x 从压缩的文件中提取文件 -t 显示压缩文件的内容 -z 支持gzip解压文件 -j 支持bzip2解压文件 -Z 支持compress解压文件 -v 显示操作过程 -l 文件系统边界设置 -k 保留原有文件不覆盖 -m 保留文件不被覆盖 -W 确认压缩文件的正确性 可选参数如下： -b 设置区块数目 -C 切换到指定目录 -f 指定压缩文件 –help 显示帮助信息 –version 显示版本信息 4．常见解压/压缩命令 tar解包：tar xvf FileName.tar打包：tar cvf FileName.tar DirName（注：tar是打包，不是压缩！） .gz解压1：gunzip FileName.gz解压2：gzip -d FileName.gz压缩：gzip FileName.tar.gz 和 .tgz解压：tar zxvf FileName.tar.gz压缩：tar zcvf FileName.tar.gz DirName .bz2解压1：bzip2 -d FileName.bz2解压2：bunzip2 FileName.bz2压缩： bzip2 -z FileName .tar.bz2解压：tar jxvf FileName.tar.bz2压缩：tar jcvf FileName.tar.bz2 DirName .bz解压1：bzip2 -d FileName.bz解压2：bunzip2 FileName.bz压缩：未知.tar.bz解压：tar jxvf FileName.tar.bz压缩：未知 .Z解压：uncompress FileName.Z压缩：compress FileName.tar.Z解压：tar Zxvf FileName.tar.Z压缩：tar Zcvf FileName.tar.Z DirName.zip解压：unzip FileName.zip压缩：zip FileName.zip DirName .rar解压：rar x FileName.rar压缩：rar a FileName.rar DirName 5．使用实例 实例1：将文件全部打包成tar包 命令： tar -cvf log.tar log2012.log tar -zcvf log.tar.gz log2012.log tar -jcvf log.tar.bz2 log2012.log]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一个linux命令之 cp]]></title>
    <url>%2F2019%2F03%2F14%2Fcp%2F</url>
    <content type="text"><![CDATA[一、复制一个源文件到目标文件（夹）。 命令格式为：cp 源文件 目标文件（夹） 这个是使用频率最多的命令，负责把一个源文件复制到目标文件（夹）下。如下图所示，复制到文件夹下，则文件名保持不变，复制到文件中，则文件名变更。如果目标文件已经存在或目标文件夹中含有同名文件，则复制之后目标文件或目标文件夹中的同名文件会被覆盖。 二、同时复制多个文件到目标文件（夹）下。 命令格式为：cp 源文件1 源文件2 目标文件夹 或 cp 文件* 目标文件夹 这个命令使用频率也很高。第一种命令格式可以把列出来的多个文件一次性复制到目标文件夹下，每个文件直接用空格分隔；第二种命令格式使用了通配符*，如下图所示，可以将所有以“.txt”结尾的文件都复制到文件夹testDir下。 三、复制源文件夹到目标文件夹下。 命令格式为：cp -r 源文件夹 目标文件夹 这个也是使用频率很高的命令，只需要记住复制文件夹一定要加“-r”参数，否则会出现“cp: omitting directory”错误。 四、只有源文件较目标文件新时复制。 命令格式为：cp -u 源文件 目标文件 这个命令很实用，尤其是在更新文件时。如下图所示，只有源文件比目标文件新时，才会将源文件复制给目标文件，否则，及时执行了命令，也不会执行复制。 五、创建文件的软链接。 命令格式为：cp -s 源文件 目标文件 也可以用ln命令实现同样的功能。当一个文件路径太深（如下述的a/b/c/d/e/orginalFile.txt），访问起来十分不方便时，就会创建这个文件的软链接，使之访问起来更方便些。软链接就相当于windows上的快捷方式。 六、创建文件的硬链接。 命令格式为：cp -l 源文件 目标文件 也可以用ln命令实现同样的功能。有时候，为了某种原因，需要创建一个硬链接，如下图所示。 这里简单介绍下硬链接和软链接的区别。如下图所示，软连接文件（softLink.txt）和被链接文件（orginalFile.txt）所拥有的inode不相同（133827和139819），硬链接文件（hardLink.txt）和被链接的文件（orginalFile22.txt）拥有相同的inode（156981）。当被链接的文件删除时，软链接文件也无法访问了，而硬链接文件仍能正常访问。]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装好自己的博客，想要更改主题]]></title>
    <url>%2F2019%2F03%2F13%2Fblogtheme%2F</url>
    <content type="text"><![CDATA[1、从git上下载yelee主题放到themes文件夹下 git clone git@github.com:MOxFIVE/hexo-theme-yelee.git themes/yelee 2、更改blog文件夹下的_config.yml文件 将theme改成yelee 3、然后执行 hexo s 可以到网站上查看是否完成 ps：网站再次进行部署时，还需要清理public文件夹内容，重新生成部署，用以下命令。 hexo clean #尤其在更换主题后使用 hexo g hexo d]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo+Github一步步搭建属于自己的博客（基础）]]></title>
    <url>%2F2019%2F03%2F12%2Fmyfirstblog%2F</url>
    <content type="text"><![CDATA[1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择 注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面 输入npm install hexo -g，开始安装Hexo 输入hexo -v，检查hexo是否安装成功 输入hexo init，初始化该文件夹（有点漫长的等待。。。） 看到后面的“Start blogging with Hexo！”，激动有木有！！！！！ 输入npm install，安装所需要的组件 输入hexo g，首次体验Hexo 输入hexo s，开启服务器，访问该网址，正式体验Hexo 问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号 那么出现如下图就成功了 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话） 上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱 输入cd ~/.ssh，检查是否由.ssh的文件夹 输入ls，列出该文件下的内容。下图说明存在 输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决 首先，清除所有的key-pairssh-add -Drm -r ~/.ssh删除你在github中的public-key 重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“ 接下来正常操作在github上添加公钥public-key:1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板2、在github上添加公钥时，直接复制即可3、保存 测试：在终端 ssh -T git@github.com 6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾） repo值是你在github项目里的ssh（右下角） 7、新建一篇博客，在cmd执行命令：hexo new post “博客名” 这时候在文件夹_posts目录下将会看到已经创建的文件 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来是进阶的操作]]></content>
      <tags>
        <tag>IT技术</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
